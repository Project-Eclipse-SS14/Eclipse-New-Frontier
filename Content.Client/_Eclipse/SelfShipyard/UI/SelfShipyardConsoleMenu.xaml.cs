using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Client._Eclipse.SelfShipyard.BUI;
using Content.Shared._NF.Bank;
using Content.Shared._Eclipse.SelfShipyard.BUI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client._Eclipse.SelfShipyard.UI;

[GenerateTypedNameReferences]
public sealed partial class SelfShipyardConsoleMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<ButtonEventArgs>? OnSellShip;
    public event Action<ButtonEventArgs>? OnOrderApproved;
    private readonly SelfShipyardConsoleBoundUserInterface _menu;

    private List<OwnedVesselVisibleRecord> _lastAvailableProtos = new();
    private bool _validId = false;

    public SelfShipyardConsoleMenu(SelfShipyardConsoleBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _menu = owner;
        Title = Loc.GetString("shipyard-console-menu-title");
        SearchBar.OnTextChanged += OnSearchBarTextChanged;
        SellShipButton.OnPressed += (args) => { OnSellShip?.Invoke(args); };
    }


    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateProducts(_lastAvailableProtos, _validId);
    }

    /// <summary>
    ///     Populates the list of products that will actually be shown, using the current filters.
    /// </summary>
    public void PopulateProducts(List<OwnedVesselVisibleRecord> availablePrototypes, bool canPurchase)
    {
        Vessels.RemoveAllChildren();

        var search = SearchBar.Text.Trim().ToLowerInvariant();

        AddVesselsToControls(availablePrototypes, search, canPurchase);

        _lastAvailableProtos = availablePrototypes;
    }

    /// <summary>
    /// Adds all vessels in a given list of prototypes as VesselRows in the UI.
    /// </summary>
    private void AddVesselsToControls(IEnumerable<OwnedVesselVisibleRecord?> vessels, string search, bool canPurchase)
    {
        foreach (var prototype in vessels)
        {
            // Filter any ships
            if (search.Length > 0 && !prototype!.Name.ToLowerInvariant().Contains(search))
                continue;

            string priceText = BankSystemExtensions.ToSpesoString(prototype!.Price);

            var vesselEntry = new OwnedVesselRow
            {
                Vessel = prototype,
                VesselName = { Text = prototype!.Name },
                Purchase = { Text = Loc.GetString("self-shipyard-console-purchase-available"), Disabled = !canPurchase },
                Price = { Text = priceText },
            };
            vesselEntry.Purchase.OnPressed += (args) => { OnOrderApproved?.Invoke(args); };
            Vessels.AddChild(vesselEntry);
        }
    }

    public void UpdateState(SelfShipyardConsoleInterfaceState state)
    {
        BalanceLabel.Text = BankSystemExtensions.ToSpesoString(state.Balance);

        ShipAppraisalLabel.Text = $"{BankSystemExtensions.ToSpesoString(state.ShipSaveRate)} ({state.PercentSellRate * 100.0f:F1}% + {BankSystemExtensions.ToSpesoString(state.ConstantSellRate)})";
        SellShipButton.Disabled = state.ShipDeedTitle == null;
        TargetIdButton.Text = state.IsTargetIdPresent
            ? Loc.GetString("id-card-console-window-eject-button")
            : Loc.GetString("id-card-console-window-insert-button");
        if (state.ShipDeedTitle != null)
        {
            DeedTitle.Text = state.ShipDeedTitle;
        }
        else
        {
            DeedTitle.Text = $"None";
        }
        _validId = state.IsTargetIdPresent;
        PopulateProducts(_lastAvailableProtos, _validId);
    }
}
